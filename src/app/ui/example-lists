import React, { useState, useEffect } from 'react';

interface Item {
  id: string;
  title: string;
  user_rating: number;
  year?: number;
  genre?: string;
}

interface RatingListsProps {
  items: Item[];
  onUpdate?: (items: Item[]) => void;
}

export default function ExampleLists({ items: initialItems = [], onUpdate }) {
  const [items, setItems] = useState<Item[]>([]);
  
  useEffect(() => {
    setItems(initialItems);
  }, [initialItems]);

  const handleDragStart = (e: React.DragEvent, item: Item) => {
    e.dataTransfer.setData('text/plain', JSON.stringify(item));
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent, newRating: number) => {
    e.preventDefault();
    const draggedItem = JSON.parse(e.dataTransfer.getData('text/plain')) as Item;
    
    const updatedItems = items.map(item => 
      item.id === draggedItem.id 
        ? { ...item, user_rating: newRating }
        : item
    );
    
    setItems(updatedItems);
    onUpdate?.(updatedItems);
  };

  const itemsByRating: Record<number, Item[]> = {};
  for (let i = 0; i <= 5; i++) {
    itemsByRating[i] = items.filter(item => item.user_rating === i);
  }

  return (
    <div className="space-y-8">
      {[5, 4, 3, 2, 1, 0].map(rating => (
        <div 
          key={rating}
          className="p-4 bg-gray-50 rounded-lg"
          onDragOver={handleDragOver}
          onDrop={(e) => handleDrop(e, rating)}
        >
          <h2 className="mb-4 text-lg font-semibold flex items-center gap-2">
            <span>Rating: {rating}</span>
            <div className="flex">
              {[...Array(5)].map((_, i) => (
                <span
                  key={i}
                  className={`text-xl ${
                    i < rating ? 'text-yellow-400' : 'text-gray-300'
                  }`}
                >
                  ★
                </span>
              ))}
            </div>
          </h2>
          
          <ul className="space-y-2">
            {itemsByRating[rating]?.map(item => (
              <li
                key={item.id}
                draggable
                onDragStart={(e) => handleDragStart(e, item)}
                className="p-3 bg-white rounded shadow cursor-move hover:shadow-md transition-shadow flex justify-between items-center"
              >
                <div>
                  <span className="font-medium">{item.title}</span>
                  {item.year && (
                    <span className="text-sm text-gray-500 ml-2">({item.year})</span>
                  )}
                  {item.genre && (
                    <span className="text-sm text-gray-500 ml-2">• {item.genre}</span>
                  )}
                </div>
                <div className="text-sm text-gray-500">
                  Drag to change rating
                </div>
              </li>
            ))}
            {(!itemsByRating[rating] || itemsByRating[rating].length === 0) && (
              <li className="p-3 border-2 border-dashed border-gray-200 rounded text-gray-400 text-center">
                Drop items here
              </li>
            )}
          </ul>
        </div>
      ))}
    </div>
  );
}